"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var app = require("tns-core-modules/application");
var enums = require("tns-core-modules/ui/enums");
var modal_dialog_1 = require("nativescript-angular/modal-dialog");
var observable_array_1 = require("tns-core-modules/data/observable-array");
var dataItem_service_1 = require("../dataItem.service");
var animation_1 = require("ui/animation");
var BrowseComponent = /** @class */ (function () {
    function BrowseComponent(_dataItemService, modalService, vcRef) {
        this._dataItemService = _dataItemService;
        this.modalService = modalService;
        this.vcRef = vcRef;
        this.isAfficher = true;
        this.isVisible1 = false;
        this.isVisible2 = false;
        this.isVisible3 = false;
        this.isVisible4 = false;
        this.isUn = true;
        this.isDeux = false;
        this.isTrois = false;
        // Use the component constructor to inject providers.
    }
    BrowseComponent.prototype.animateSlider = function (image) {
        var _this = this;
        image.animate({
            opacity: 0,
            // backgroundColor: new Color("Blue"),
            translate: { x: 0, y: 0 },
            scale: { x: 1, y: 1 },
            rotate: 0,
            duration: 5000,
            delay: 50,
            iterations: 1,
            curve: enums.AnimationCurve.easeInOut
        }).then(function () {
            console.log("Animation finished.");
            _this.isUn = false;
            _this.isDeux = true;
        }).catch(function (e) {
            console.log(e.message);
        });
    };
    BrowseComponent.prototype.animate = function (image) {
        var _this = this;
        image.animate({
            opacity: 0,
            // backgroundColor: new Color("Blue"),
            translate: { x: 0, y: 0 },
            scale: { x: 1, y: 1 },
            rotate: 0,
            duration: 5000,
            delay: 50,
            iterations: 1,
            curve: enums.AnimationCurve.easeInOut
        }).then(function () {
            console.log("Animation finished.");
            _this.isUn = false;
            _this.isDeux = true;
        }).catch(function (e) {
            console.log(e.message);
        });
    };
    BrowseComponent.prototype.animate2 = function (image) {
        var _this = this;
        image.animate({
            opacity: 0,
            duration: 5000,
            iterations: 1,
            curve: enums.AnimationCurve.easeInOut
        }).then(function () {
            console.log("Animation finished.");
            _this.isDeux = false;
            _this.isTrois = true;
        }).catch(function (e) {
            console.log(e.message);
        });
    };
    //        animate3(image: Image) {
    BrowseComponent.prototype.animate3 = function (AbLy) {
        var _this = this;
        AbLy.animate({
            opacity: 0,
            duration: 5000,
            iterations: 1,
            curve: enums.AnimationCurve.easeInOut
        }).then(function () {
            console.log("Animation finished 1.");
            _this.ImgSlider = "res://cabinet3";
            AbLy.animate({
                opacity: 1,
                duration: 3000,
                iterations: 1,
                curve: enums.AnimationCurve.easeInOut
            }).then(function () {
                console.log("Animation finished2.");
                AbLy.animate({
                    opacity: 0,
                    duration: 3000,
                    iterations: 1,
                    curve: enums.AnimationCurve.easeInOut
                }).then(function () {
                    _this.ImgSlider = "res://cabinet1";
                    console.log("Animation finished 3s.");
                    AbLy.animate({
                        opacity: 1,
                        duration: 5000,
                        iterations: 1,
                        curve: enums.AnimationCurve.easeInOut
                    }).then(function () {
                        console.log("Animation finished 3s.");
                        AbLy.animate({
                            opacity: 0,
                            duration: 3000,
                            iterations: 1,
                            curve: enums.AnimationCurve.easeInOut
                        });
                        _this.ImgSlider = "res://cabinet";
                        AbLy.animate({
                            opacity: 1,
                            duration: 3000,
                            iterations: 1,
                            curve: enums.AnimationCurve.easeInOut
                        });
                    });
                });
            });
        }).catch(function (e) {
            console.log(e.message);
        });
    };
    BrowseComponent.prototype.ngOnInit = function () {
        // Init your component properties here.
        this._dataItems = new observable_array_1.ObservableArray(this._dataItemService.getVariableWidthItems());
        this._selectedItems = "No Selected items.";
        this.ImgSlider = "res://cabinet";
    };
    BrowseComponent.prototype.test1 = function () {
    };
    BrowseComponent.prototype.test2 = function () {
        alert("ok1");
    };
    BrowseComponent.prototype.test3 = function () {
        alert("ok1");
    };
    BrowseComponent.prototype.test4 = function () {
        if (this.isVisible4) {
            this.isVisible4 = false;
        }
        else {
            this.isVisible4 = true;
        }
    };
    BrowseComponent.prototype.infoDoc = function (StLy) {
        this.onAnimate(StLy); //rends invisible toto
        //this.animate0;
    };
    BrowseComponent.prototype.infoDoc2 = function (StLy) {
        this.onAnimate2(StLy); //rends visible toto
        //this.animate0;
    };
    BrowseComponent.prototype.FadeSlider = function (AbLy) {
        this.animate3(AbLy);
        //this.animate0;
    };
    Object.defineProperty(BrowseComponent.prototype, "selectedItems", {
        get: function () {
            return this._selectedItems;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BrowseComponent.prototype, "dataItems", {
        get: function () {
            return this._dataItems;
        },
        enumerable: true,
        configurable: true
    });
    BrowseComponent.prototype.Loaded = function (args) {
        var page = args.object;
        this.view = page.getViewById("view");
        console.log('ok');
    };
    BrowseComponent.prototype.onAnimate = function (view) {
        view.animate({ opacity: 1 })
            .then(function () { return view.animate({ opacity: 0 }); })
            .then(function () {
            console.log("Animation finished 1");
        })
            .catch(function (e) {
            console.log(e.message);
        });
    };
    BrowseComponent.prototype.onAnimate2 = function (view) {
        view.animate({ opacity: 1 })
            .then(function () { return view.animate({ opacity: 1 }); })
            .then(function () {
            console.log("Animation finished 2");
        })
            .catch(function (e) {
            console.log(e.message);
        });
    };
    BrowseComponent.prototype.onAnimate3 = function (AbLy) {
        this.animationSet = new animation_1.Animation([{
                target: AbLy,
                opacity: 0,
                duration: 5000,
                iterations: Number.POSITIVE_INFINITY,
            }]);
        this.animationSet.play().catch(function (e) {
            console.log("Animation stoppped!");
        });
        // Call animationSet.cancel() to stop it;
    };
    BrowseComponent.prototype.zoom = function (view) {
        view.animate({ opacity: 0 })
            .then(function () { return view.animate({ scale: { x: 2, y: 2 } }); })
            .then(function () { return view.animate({ translate: { x: 100, y: -100 } }); })
            .then(function () { return view.animate({ opacity: 1 }); })
            .then(function () {
            console.log("Animation finished 2");
        })
            .catch(function (e) {
            console.log(e.message);
        });
    };
    BrowseComponent.prototype.onDrawerButtonTap = function () {
        var sideDrawer = app.getRootView();
        sideDrawer.showDrawer();
    };
    BrowseComponent = __decorate([
        core_1.Component({
            selector: "Browse",
            moduleId: module.id,
            providers: [dataItem_service_1.DataItemService],
            templateUrl: "./browse.component.html",
            styleUrls: ["./browse-common.css"]
        }),
        __metadata("design:paramtypes", [dataItem_service_1.DataItemService, modal_dialog_1.ModalDialogService, core_1.ViewContainerRef])
    ], BrowseComponent);
    return BrowseComponent;
}());
exports.BrowseComponent = BrowseComponent;
//# sourceMappingURL=data:application/json;base64,